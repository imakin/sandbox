var range = (function (exports) {
    'use strict';
  
    var HORIZONTAL = 0;
    var VERTICAL = 1;
  
    function draw(ctx, img, v) {
      ctx.drawImage(img, 0, 0);
    }
  
    function init(targetElem, cb, railImg, knobImg, canvas_size) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  
  
      var doubleClickTimeout = options.doubleClickTimeout || NaN;
      var valueMapping = options.valueMapping || NaN;
      var stepMapping = options.stepMapping || NaN;
      var alpha = options.alpha === undefined ? true : options.alpha;
  
      var rangeValue = 0;
      var localPos = 0;
      var selected = false;
      var lastClickTime = NaN;
      var offset = 0;
  
      var width = void 0;
      var height = void 0;
  
      var canvas = document.createElement("canvas");
      canvas.setAttribute("draggable", "false");
    //   canvas.width = canvas_size[0];
    //   canvas.height = canvas_size[1];
    //   console.log(canvas.width, canvas.height);
      canvas.width = targetElem.clientWidth;
      canvas.height = targetElem.clientHeight;
      var ctx = canvas.getContext("2d", { alpha: alpha });
  
      var drawRail = void 0;
      if (options.drawRail) drawRail = options.drawRail;else drawRail = draw;
  
      var drawKnob = void 0;
      if (options.drawKnob) drawKnob = options.drawKnob;else drawKnob = draw;
  
      targetElem.appendChild(canvas);
  
      var imgSize = railImg.width;
  
      var orientation = void 0;
      var railTransform = void 0;
      var knobTransform = void 0;
  
      var leftPos = void 0;
      var topPos = void 0;
      var xScaleRail = void 0;
      var yScaleRail = void 0;
      var railLength = void 0;
      function getSize() {
        var boundingRect = targetElem.getBoundingClientRect();
        leftPos = boundingRect.left;
        topPos = boundingRect.top;
  
        canvas.width = targetElem.clientWidth;
        canvas.height = targetElem.clientHeight;
  
        width = canvas.width;
        height = canvas.height;
  
        if (width > height) {
          orientation = HORIZONTAL;
          railLength = width - height;
  
          xScaleRail = width / imgSize;
          yScaleRail = height / imgSize;
          railTransform = function railTransform() {
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.scale(xScaleRail, yScaleRail);
          };
          railTransform();
          drawRail(ctx, railImg, 0);
  
          knobTransform = function knobTransform(value) {
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.translate((width - height) * value, 0);
            ctx.scale(width, height);
            // ctx.scale(height, height);
          };
          knobTransform();
          drawKnob(ctx, knobImg, 0);
        } else {
          orientation = VERTICAL;
          railLength = height - width;
  
          xScaleRail = width / imgSize;
          yScaleRail = height / imgSize;
  
          railTransform = function railTransform() {
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.rotate(Math.PI / 2);
            ctx.translate(0, -width);
            ctx.scale(yScaleRail, xScaleRail);
          };
          railTransform();
          drawRail(ctx, railImg, 0);
  
          knobTransform = function knobTransform(value) {
            ctx.setTransform(1, 0, 0, 1, 0, 0);//reset transformation
            ctx.translate(0, height - width - value * (height - width));
            ctx.scale(knobImg.width*(height/knobImg.height), height);
          };
          knobTransform(0);
          drawKnob(ctx, knobImg, 0);
        }
      }
  
      window.addEventListener("resize", getSize);
      document.readyState=="complete"?getSize():
        document.addEventListener("DOMContentLoaded", getSize);
  
      function move(newValue) {
        // Browser wrongfully can trigger a mousemove event just after
        // leaving the targer element so the range value must be
        // clipped.
        if (newValue > 1) newValue = 1;else if (newValue < 0) newValue = 0;
  
        rangeValue = newValue;
  
        if (stepMapping) {
          var stepValue = stepMapping(rangeValue);
          if (stepValue === null) return;else rangeValue = stepValue;
        }
  
        railTransform();
        // When a transparent rail image is used the canvas should be
        // cleared before every re-paint to avoid alpha channel
        // saturation
        if (alpha) ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawRail(ctx, railImg, rangeValue);
  
        knobTransform(rangeValue);
        drawKnob(ctx, knobImg, rangeValue);
  
        if (valueMapping) cb(valueMapping(rangeValue), localPos, targetElem);else cb(rangeValue, localPos, targetElem);
      }
  
      function mousemove(e) {
        if (orientation === HORIZONTAL) {
          localPos = e.clientX - leftPos;
          move((localPos - height) / railLength + offset);
        } else {
          localPos = e.clientY - topPos;
          move(1 - (localPos - width) / railLength + offset);
        }
      }
  
      function wheel(e) {
        if (!selected) return;
  
        e.preventDefault();
        console.log(e.deltaY);
  
        offset += e.deltaY / Math.abs(e.deltaY) / 200;
        console.log(e.clientX);
        mousemove(e);
      }
  
      function mouseup(e) {
        if (selected && doubleClickTimeout !== doubleClickTimeout) return;
  
        mousemove(e);
        window.removeEventListener("mousemove", mousemove);
        window.removeEventListener("mouseup", mouseup);
        window.removeEventListener("wheel", wheel);
      }
      function mousedown(e) {
  
        console.log(e);
  
        if (e.which !== 1 || "button" in e && e.button !== 0) return;
  
        var time = Date.now();
        if (time - lastClickTime < doubleClickTimeout) {
          if (!selected) {
            selected = true;
          } else {
            selected = false;
            offset = 0;
          }
  
          lastClickTime = NaN;
          console.log(selected);
        } else {
          lastClickTime = time;
        }
  
        window.addEventListener("mousemove", mousemove);
        window.addEventListener("mouseup", mouseup);
        targetElem.addEventListener("wheel", wheel);
      }  targetElem.addEventListener("mousedown", mousedown);
  
      targetElem.addEventListener("touchstart", function (e) {
        e.preventDefault();
  
        function touchmove(e) {
          e.preventDefault();
          if (orientation === HORIZONTAL) {
            localPos = e.changedTouches[0].clientX - leftPos;
            move((localPos - height) / railLength);
          } else {
            localPos = e.changedTouches[0].clientY - topPos;
            move(1 - (localPos - width) / railLength);
          }
  
          return false;
        }
  
        function touchend(e) {
          e.preventDefault();
          touchmove(e);
          window.removeEventListener("touchmove", touchmove);
          window.removeEventListener("touchend", touchend);
          return false;
        }
        window.addEventListener("touchmove", touchmove);
        window.addEventListener("touchend", touchend);
        return false;
      });
  
      var ctrl = {
        changeValue: function changeValue(v) {
          move(v);
        },
        selection: function selection(selectChange) {
          if (selectChange === true) {
            selected = selectChange;
            mousedown({ clientX: 0, clientY: 0, which: 1, button: 0 });
          } else if (selectChange === false) {
            selected = selectChange;
            mouseup({ clientX: 0, clientY: 0, which: 1, button: 0 });
          } else {
            console.error(selectChange + " is not a boolean, required for change selection state");
          }
        }
      };
  
      return ctrl;
    }
  
    exports.init = init;
  
    return exports;
  
  }({}));
  